########################################################
# YASS configuration example (all sections and values) #
########################################################

data:
  # project's root folder, data will be loaded and saved here
  # can be an absolute or relative path
  root_folder: data/retina/
  # recordings filename (must be a binary file), details about the recordings
  # are specified in the recordings section
  recordings: data.bin
  # channel geometry filename , supports txt (one x, y pair per line,
  # separated by spaces) or a npy file with shape (n_channels, 2),
  # where every row contains a x, y pair. see yass.geometry.parse for details
  geometry: geometry.npy

resources:
  # CPU multi-processing flag: 1 = use multiple cores
  multi_processing: 1
  # Number of cores to use
  n_processors: 6
  # Length of processing chunk in seconds for multi-processing stages
  n_sec_chunk: 5
  # n_sec_chunk for gpu
  n_sec_chunk_gpu: 1

recordings:
  # precision of the recording â€“ must be a valid numpy dtype
  dtype: int16
  # recording rate (in Hz)
  sampling_rate: 20000
  # number of channels
  n_channels: 49
  # channels spatial radius to consider them neighbors, see
  # yass.geometry.find_channel_neighbors for details
  spatial_radius: 70
  # temporal length of waveforms in ms. It must capture
  # the full shape of waveforms but longer means slower
  spike_size_ms: 4

preprocess:
  # apply butterworth filter in the preprocessing step
  apply_filter: True
  # output dtype for transformed data
  dtype: float32
  # filter configuration
  filter:
    # Order of Butterworth filter
    order: 3
    # Low pass frequency (Hz)
    low_pass_freq: 300
    # High pass factor (proportion of sampling rate)
    high_factor: 0.45

# Once neural net is trained using the config below,
# the same config must be used in actual spike sorting
neuralnetwork:
  # temporal size of spikes to be used for training neural net
  spike_size_ms: 1.5
  detect:
    # model name, it can be an absolute path to a model 
    # (e.g. /path/to/my/model.ckpt) or a name of one of models included in yass 
    # (e.g. detect.pt). Check /src/yass/assets/nn_models for the list of available
    # models.
    filename: detect.pt  
    n_filters: [16, 8, 8] 
  denoise:
    # model name, same rule as detect filename
    filename: denoise.pt
    n_filters: [16, 8, 4]
    filter_sizes : [5, 11, 21]
  training:
    # input spike train file name. It must be a numpy file of an arroay of n x 2.
    # n is the number of spikes, the first column is the spike times 
    # (center of spikes), the second column is the unit id.
    input_spike_train_filname: spike_train.npy

detect:
  # 'nn' for neural net detction, 'threshold' for amplitude threshold detection
  method: nn
  # threshold 
  # if it is nn detector, must be between [0, 1]
  # if amplitude threshold detector, recommended between [3, 6]
  threshold: 0.5

# All values are optional
cluster:
  # maximum number of spikes per clustering group
  # if the total number of spikes per clustering group exceeds it,
  # it randomly subsample
  max_n_spikes: 10000
  # cluster prior information
  prior:
    beta: 1
    a: 1
    lambda0: 0.01
    nu: 5
    V: 2

deconvolution:
    # threshold on objective function on greedy deconv
    threshold: 20
    # use gpu version or not
    deconv_gpu: True
