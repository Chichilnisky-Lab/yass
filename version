#!/usr/bin/env python
"""
Script for creating new releases
"""
import ast
import re
from subprocess import call as _call
from functools import reduce
import datetime

import click

TESTING = True
PACKAGE = 'src/yass'


def replace_in_file(path_to_file, original, replacement):
    """Replace string in file
    """
    with open(path_to_file, 'r+') as f:
        content = f.read()
        updated = content.replace(original, replacement)
        f.seek(0)
        f.write(updated)
        f.truncate()


def read_file(path_to_file):
    with open(path_to_file, 'r') as f:
        content = f.read()

    return content


def call(*args, **kwargs):
    """Mocks call function for testing
    """
    if TESTING:
        print(args, kwargs)
        return 0
    else:
        return _call(*args, **kwargs)


class Versioner(object):
    """Utility functions to manage versions
    """

    @classmethod
    def current_version(cls):
        """Returns the current version in __init__.py
        """
        _version_re = re.compile(r'__version__\s+=\s+(.*)')

        with open('{package}/__init__.py'.format(package=PACKAGE), 'rb') as f:
            VERSION = str(ast.literal_eval(_version_re.search(
                f.read().decode('utf-8')).group(1)))

        return VERSION

    @classmethod
    def release_version(cls):
        """
        Returns a release version number
        e.g. 2.4.4dev -> v.2.2.4
        """
        current = cls.current_version()

        if 'dev' not in current:
            raise ValueError('Current version is not a dev version')

        return current.replace('dev', '')

    @classmethod
    def bump_up_version(cls):
        """
        Gets gets a release version and returns a the next value value.
        e.g. 1.2.5 -> 1.2.6dev
        """
        # Get current version
        current = cls.current_version()

        if 'dev' in current:
            raise ValueError('Current version is dev version, new dev '
                             'versions can only be made from release versions')

        # Get Z from X.Y.Z and sum 1
        new_subversion = int(current.split('.')[-1]) + 1

        # Replace new_subversion in current version
        elements = current.split('.')
        elements[-1] = new_subversion
        new_version = reduce(lambda x, y: str(x)+'.'+str(y), elements)+'dev'

        return new_version

    @classmethod
    def save_version(cls, new_version, message='', tag=False):
        """
        Replaces version in  __init__ and optionally creates a tag in the git
        repository (also saves a commit)
        """
        current = cls.current_version()

        # replace new version in __init__.py
        replace_in_file('{package}/__init__.py'.format(package=PACKAGE),
                        current, new_version)

        # Create tag
        if tag:
            # Run git add and git status
            click.echo('Adding new changes to the repository...')
            call(['git', 'add', '--all'])
            call(['git', 'status'])

            # Commit repo with updated dev version
            click.echo('Creating new commit release version...')
            msg = 'Release {}'.format(new_version)
            call(['git', 'commit', '-m', msg])

            click.echo('Creating tag {}...'.format(new_version))
            call(['git', 'tag', '-a', new_version, '-m', message])

            click.echo('Pushing tags...')
            call(['git', 'push', '--tags'])

    @classmethod
    def update_changelog(cls, new_version):
        current = cls.current_version()

        # Save version in app.yaml
        header_current = '{ver}\n'.format(ver=current)+'-'*len(current)

        today = datetime.datetime.now().strftime('%Y-%m-%d')
        header_new = '{ver} ({today})\n'.format(ver=new_version, today=today)
        header_new = header_new+'-'*len(header_new)

        replace_in_file('CHANGELOG.rst', header_current, header_new)


@click.group()
def cli():
    pass


@cli.command(help='Sets a new version for the project')
def new():
    current = Versioner.current_version()
    release = Versioner.release_version()

    click.confirm('Current version in app.yaml is {current} release version '
                  'will be {release}, do you want to continue?'
                  .format(current=current, release=release), abort=True)

    Versioner.update_changelog()

    changelog = read_file('CHANGELOG.rst')

    click.confirm('CHANGELOG.rst:\n{}\n Continue?'.format(changelog),
                  'done', abort=True)

    # Ask for a message to include in the tag
    message = click.prompt('What is this release about? ')

    # Replace version number and create tag
    Versioner.save_version(release, message, tag=True)

    # Create a new dev version and save it
    bumped_version = Versioner.bump_up_version()
    click.echo('Setting new dev version to: {}'.format(bumped_version))
    Versioner.save_version(bumped_version)

    # Run git add and git status
    click.echo('Adding new changes to the repository...')
    call(['git', 'add', '--all'])
    call(['git', 'status'])

    # Commit repo with updated dev version
    click.echo('Creating new commit with new dev version...')
    msg = 'Bumps up project to version {}'.format(bumped_version)
    call(['git', 'commit', '-m', msg])

    click.echo('Version {} was created, you are now in {}'
               .format(release, bumped_version))


@cli.command(help='Merges changes in dev with master')
def tomaster():
    click.echo('Checking out master...')
    call(['git', 'checkout', 'master'])

    click.echo('Merging master with dev...')
    call(['git', 'merge', 'dev'])

    click.echo('Pushing changes...')
    call(['git', 'push'])


# TODO: command to publish package, check out twine


if __name__ == '__main__':
    cli()
